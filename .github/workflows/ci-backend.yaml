name: 'Continuous Integration'
on:
  workflow_dispatch:
  push:
    branches:
      - 'feature/**'
      - 'fix/**'
  pull_request:
    branches:
      - 'feature/**'
      - 'fix/**'

jobs:
  build:
    name: 'Build üèó'
    strategy:
      matrix:
        os: 
          - ubuntu-latest
        python-version:
          - "3.11"
    defaults:
      run:
        working-directory: backend/
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check repository
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Install dependencies
        run:  |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
  
  code-quality:
    name: 'Code-Quality üíé'
    needs: build
    strategy:
      matrix:
        os:
          - ubuntu-latest
        python-version:
          - "3.11"
    defaults:
      run:
        working-directory: backend/
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check repository
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Install dev dependencies
        run:  |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Install Dependencies for Linting
        run: |
          pip install flake8
      - name: Lint with Black
        uses: psf/black@stable
        with:
          options: "--exclude=tests/"
          src: "backend/src/"
      - name: Lint with Isort
        run: |
          isort . --profile black
      - name: Lint with MyPy
        run: |
          mypy . --pretty
 
  test:
    name: 'Test üî¨'
    needs: build
    strategy:
      matrix:
        os: 
          - ubuntu-latest
        python-version:
          - "3.11"
        mongodb-version:
          - "6.0"
    defaults:
      run:
        working-directory: backend/
    env:
      ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
      IS_DEBUG: ${{ secrets.IS_DEBUG }}
      API_VERSION: ${{ secrets.API_VERSION }}
      BACKEND_SERVER_HOST: ${{ secrets.BACKEND_SERVER_HOST }}
      BACKEND_SERVER_PORT: ${{ secrets.BACKEND_SERVER_PORT }}
      BACKEND_SERVER_WORKERS: ${{ secrets.BACKEND_SERVER_WORKERS }}
      TEMPLATE_DIR_NAME: ${{ secrets.TEMPLATE_DIR_NAME }}
      IS_ALLOWED_CREDENTIALS: ${{ secrets.IS_ALLOWED_CREDENTIALS }}
      ORIGIN: ${{ secrets.ORIGIN }}
      HEADER: ${{ secrets.HEADER }}
      METHOD: ${{ secrets.METHOD }}
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      MONGODB_ATLAS_URI: ${{ secrets.MONGODB_ATLAS_URI }}
      ACCESS_TOKEN_EXPIRES_IN: ${{ secrets.ACCESS_TOKEN_EXPIRES_IN }}
      REFRESH_TOKEN_EXPIRES_IN: ${{ secrets.REFRESH_TOKEN_EXPIRES_IN }}
      JWT_TOKEN_PREFIX: ${{ secrets.JWT_TOKEN_PREFIX }}
      JWT_SUBJECT: ${{ secrets.JWT_SUBJECT }}
      JWT_ALGORITHM: ${{ secrets.JWT_ALGORITHM }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      TOKEN_COOKIE_NAME: ${{ secrets.TOKEN_COOKIE_NAME }}
      CSRF_SECRET_KEY: ${{ secrets.CSRF_SECRET_KEY }}
      BCRYPT_HASHING_ALGORITHM: ${{ secrets.BCRYPT_HASHING_ALGORITHM }}
      SHA256_HASHING_ALGORITHM: ${{ secrets.SHA256_HASHING_ALGORITHM }}
      ARGON2_HASHING_ALGORITHM: ${{ secrets.ARGON2_HASHING_ALGORITHM }}
      SHA512_HASHING_ALGORITHM: ${{ secrets.SHA512_HASHING_ALGORITHM }}
      HASHING_SALT: ${{ secrets.HASHING_SALT }}
      PWD_ALGORITHM_LAYER_1: ${{ secrets.PWD_ALGORITHM_LAYER_1 }}
      PWD_ALGORITHM_LAYER_2: ${{ secrets.PWD_ALGORITHM_LAYER_2 }}
      MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      MAIL_FROM: ${{ secrets.MAIL_FROM }}
      MAIL_PORT: ${{ secrets.MAIL_PORT }}
      MAIL_SERVER: ${{ secrets.MAIL_SERVER }}
      MAIL_FROM_NAME: ${{ secrets.MAIL_FROM_NAME }}
      MAIL_FROM_USERNAME: ${{ secrets.MAIL_FROM_USERNAME }}
      IS_USE_CREDENTIALS: ${{ secrets.IS_USE_CREDENTIALS }}
      IS_STARTTLS: ${{ secrets.IS_STARTTLS }}
      IS_SSL_TLS: ${{ secrets.IS_SSL_TLS }}
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check repository
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.8.0
        with:
          mongodb-version: ${{ matrix.mongodb-version }}
      - name: Install dependencies
        run:  |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Install Dependencies for Testing
        run: |
          pip install pytest-asyncio pytest-cov pytest-xdist
      - name: Test with Pytest-Cov
        run: |
          pytest --cov --cov-report xml .
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3.1.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          flags: api_app_tests
          name: codecov-umbrella
          verbose: true

  # docker-build:
  #   name: 'Build Docker Image üê≥'
  #   needs: [test, code-quality]
  #   runs-on: ubuntu-latest
  #   env: 
  #     GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
  #     IMAGE: docker.pkg.github.com/$(echo $GITHUB_REPOSITORY | tr '[A-Z]' '[a-z]')/dashboard

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Log in to GitHub Packages
  #       run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Pull image
  #       run: |
  #         docker pull ${{ env.IMAGE }}:latest || true
  #     - name: Build image
  #       run: |
  #         docker build \
  #           --cache-from ${{ env.IMAGE }}:latest \
  #           --tag ${{ env.IMAGE }}:latest \
  #           --file ./dashboard/backend/Dockerfile.prod \
  #           "./dashboard/backend"
  #     - name: Push image
  #       run: |
  #         docker login docker.pkg.github.com -u eternal-engine -p ${{ env.GITHUB_TOKEN }}
  #         docker push ${{ env.IMAGE }}:latest
